#
#ident	@(#)$Id: TODO,v 1.4 2006/08/08 00:32:56 gdamore Exp $
#
ADMtek ethernet driver TODO list
================================

	1) PM		- add support for power management.
			  Note that not even the Sun NICs do
			  this right now.  Its probably of little value
			  anyway -- the power consumed by a typical ethernet
			  chip is usually negligble.  (Some high-end gigabit
			  transceivers consume a lot of power, though.)

	2) PCI tuning	- tune PCI performance parameters (burstsizes)

	3) Buf tuning	- use esballoc and/or other mechanisms to reduce
			  mblk copying operations, use DMA instead for
			  large packets.

			  Note: on faster machines (e.g. Pentium III or
			  better), it may actually be faster to do the
			  block copy than setup a DMA region.  This is
			  especially true on SPARC platforms where IOMMU
			  setup operations are involved with DMA mapping.

			  Note: esballoc can create problems for DR.
			  It must not be possible to unload a driver
			  while outstanding esballoc'd drivers are
			  upstream.  Handling this may create a need
			  to introduce another lock on the receive side,
			  further reducing the benefit of doing this.

	4) hardening	- provide support for driver hardening entry
			  points for S8 users.  This needs to not compromise
			  functionality on pre-S8 systems.

			  Note: as of Solaris 8, this may only be beneficial
			  on SPARC (where an IOMMU helps guarantee integrity),
			  but current low-end platforms lack the necessary
			  support software for true hardening.)

			  Update 8/27/2004: The driver hardening framework
			  was never fully implemented in Solaris, so it
			  is of little or no value.  Solaris 10 may change
			  this framework significantly, creating a desire
			  to have this functionality implemented.

	6) VLAN	support	- Solaris 10 has VLAN hooks in GLD, so we could
			  support VLANs.

	7) nemo/GLDv3	- Solaris 10/11 have the new nemo framework, which
			  supports a bunch of new features (VLAN, jumbo frames,
			  802.3ad aggregation, etc.)  We should support this,
			  at some point.

	8) new intr DDI	- there is a new DDI for interrupt handling in 
			  OpenSolaris.  We should probably convert to it at
			  some point.  The old API we are using is now
			  deprecated (though I expect it will be supported for
			  some time to come.)

	9) sunvts	- it would be nice to be able to use sunvts to test
			  this.  newer sunvts just needs a few ioctls from
			  what I can see.  (mostly for loopback manipulation)

Completed items
---------------
	1) sparc	- the driver currently doesn't operate properly
			  on a 64-bit sparc kernel (32-bit untested right
			  now) -- we are seeing DVMA translation errors.
			  Need to track this problem down and fix it.  Could
			  be endianness, or something else.

			  (This was tracked down to incorrect default mingnt
			  and maxlat settings on ADMtek-based boards.
			  Board manufacturers can correct this by updating
			  their SROMs, and should contact me if they would
			  like more complete information.)

	2) phytimer	- add a timeout (or use GP timer on chip) to
			  read MII regs and keep link state updated,
			  also log changes so that the user knows about it.

	6) comet	- right now only Centaur works properly.  The MII
			  accesses need minor mods to work for Comet.
			  Done, but as yet untested.  (I don't have a
			  card with an actual Comet controller on it.)

	9) tx restart	- wantw is currently not used, when the system
			  runs out of buffers we expect to see stalls.

	8) int tuning	- we generate an interrupt on every tx -- this
			  is overkill - we only need a tx interrupt if we
			  are waiting for packets.

	10) MII tweaks	- allow user to specify link speed and mode, to
			  override autonegotiation. (100BT-4 not tested)

	11) docs	- package them up, add documentation for tunability
			  and supported cards.

	12) tunability	- some of the parameters should be tunable via
			  driver.conf properties, fix this.

	13) utility	- it would be nice to have a diag utility that
			  can put the card into loopback, check it out,
			  exercise it, report the PHY registers, etc.
			  Donald Becker has a utility for Linux that
			  may provide some example features.

			  Note: loopback support is still missing.

	14) DR/CPR	- dynamic reconfiguration/hotplug/suspend-resume.
			  This has been tested on SPARC systems.

	15) bug fixes	- I have reports that the driver melts down under
			  certain load profiles.  I have rewritten some of the
			  interrupt handling, and the problem seems to have
			  been eradicated.


Closed items
------------
	7) other chips	- look at other chips next -- the next one will
			  probably be a PNICII or Macronix chip, depending
			  on what hardware I can get ahold of.  Some parts of
			  this code will have to be modified to be more
			  general, specifically the EEPROM and MII access
			  stuff.

			  Note: I have a Kingston KNE-111TX which is a PNIC2.
			  I am interested in acquiring other hardware to
			  develop and test with.  Contact me if you can
			  help!

	I have since created a new driver, mxfe, which supports both the
	PNIC-II and the MX98715 family chips.  (Embryonic support is also
	present for the MX98713 family.)  PNIC support will go into a new
	PNIC driver.  I have new cards as well, including the MX98715AEC,
	PNIC-II, and LC82C169 original PNIC.
